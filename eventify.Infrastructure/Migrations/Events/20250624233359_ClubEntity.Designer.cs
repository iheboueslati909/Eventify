// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eventify.Infrastructure.Extensions;

#nullable disable

namespace eventify.Infrastructure.Migrations.Events
{
    [DbContext(typeof(EventsDbContext))]
    [Migration("20250624233359_ClubEntity")]
    partial class ClubEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtistProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("_genres")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Genres");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("ArtistProfiles");
                });

            modelBuilder.Entity("ClubOwner", b =>
                {
                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("ClubId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ClubOwners", (string)null);
                });

            modelBuilder.Entity("Eventify.Domain.Members.MemberFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId", "TargetId", "TargetType")
                        .IsUnique();

                    b.ToTable("MemberFollow");
                });

            modelBuilder.Entity("TimeTableSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("TimetableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("TimeTableSlots");
                });

            modelBuilder.Entity("TimeTableSlotArtistProfiles", b =>
                {
                    b.Property<Guid>("ArtistProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeTableSlotId")
                        .HasColumnType("uuid");

                    b.HasKey("ArtistProfileId", "TimeTableSlotId");

                    b.HasIndex("TimeTableSlotId");

                    b.ToTable("TimeTableSlotArtistProfiles");
                });

            modelBuilder.Entity("Timetable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("eventify.Domain.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<Guid>>("_ownerMemberIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("eventify.Domain.Entities.Concept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("_genres")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Genres");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Concepts");
                });

            modelBuilder.Entity("eventify.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConceptId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId");

                    b.HasIndex("Status");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("eventify.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("eventify.Domain.Entities.RecordedPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RecordedPerformances");
                });

            modelBuilder.Entity("ArtistProfile", b =>
                {
                    b.HasOne("eventify.Domain.Entities.Member", null)
                        .WithMany("ArtistProfiles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("eventify.Domain.ValueObjects.Name", "ArtistName", b1 =>
                        {
                            b1.Property<Guid>("ArtistProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ArtistName");

                            b1.HasKey("ArtistProfileId");

                            b1.ToTable("ArtistProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ArtistProfileId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ArtistProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("ArtistProfileId");

                            b1.ToTable("ArtistProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ArtistProfileId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Bio", "Bio", b1 =>
                        {
                            b1.Property<Guid>("ArtistProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Bio");

                            b1.HasKey("ArtistProfileId");

                            b1.ToTable("ArtistProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ArtistProfileId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.SocialMediaLinks", "SocialMediaLinks", b1 =>
                        {
                            b1.Property<Guid>("ArtistProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Facebook")
                                .HasColumnType("text")
                                .HasColumnName("Facebook");

                            b1.Property<string>("Instagram")
                                .HasColumnType("text")
                                .HasColumnName("Instagram");

                            b1.Property<string>("SoundCloud")
                                .HasColumnType("text")
                                .HasColumnName("SoundCloud");

                            b1.Property<string>("Spotify")
                                .HasColumnType("text")
                                .HasColumnName("Spotify");

                            b1.Property<string>("Youtube")
                                .HasColumnType("text")
                                .HasColumnName("Youtube");

                            b1.HasKey("ArtistProfileId");

                            b1.ToTable("ArtistProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ArtistProfileId");
                        });

                    b.Navigation("ArtistName")
                        .IsRequired();

                    b.Navigation("Bio");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("SocialMediaLinks");
                });

            modelBuilder.Entity("ClubOwner", b =>
                {
                    b.HasOne("eventify.Domain.Entities.Club", null)
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eventify.Domain.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTableSlot", b =>
                {
                    b.HasOne("Timetable", null)
                        .WithMany("Slots")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("eventify.Domain.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("TimeTableSlotId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Title");

                            b1.HasKey("TimeTableSlotId");

                            b1.ToTable("TimeTableSlots");

                            b1.WithOwner()
                                .HasForeignKey("TimeTableSlotId");
                        });

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTableSlotArtistProfiles", b =>
                {
                    b.HasOne("ArtistProfile", null)
                        .WithMany()
                        .HasForeignKey("ArtistProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTableSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeTableSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Timetable", b =>
                {
                    b.HasOne("eventify.Domain.Entities.Event", null)
                        .WithMany("Timetables")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("eventify.Domain.ValueObjects.Title", "StageName", b1 =>
                        {
                            b1.Property<Guid>("TimetableId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StageName");

                            b1.HasKey("TimetableId");

                            b1.ToTable("TimeTables");

                            b1.WithOwner()
                                .HasForeignKey("TimetableId");
                        });

                    b.Navigation("StageName")
                        .IsRequired();
                });

            modelBuilder.Entity("eventify.Domain.Entities.Concept", b =>
                {
                    b.HasOne("eventify.Domain.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("eventify.Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ConceptId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Description");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("ConceptId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Title");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("eventify.Domain.Entities.Event", b =>
                {
                    b.HasOne("eventify.Domain.Entities.Concept", null)
                        .WithMany()
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("eventify.Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Description");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Title");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Location");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("eventify.Domain.Entities.Member", b =>
                {
                    b.OwnsOne("eventify.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Name", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.OwnsOne("eventify.Domain.ValueObjects.Name", "LastName", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FirstName")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();
                });

            modelBuilder.Entity("eventify.Domain.Entities.RecordedPerformance", b =>
                {
                    b.OwnsOne("eventify.Domain.ValueObjects.Url", "MediaUrl", b1 =>
                        {
                            b1.Property<Guid>("RecordedPerformanceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("MediaUrl");

                            b1.HasKey("RecordedPerformanceId");

                            b1.ToTable("RecordedPerformances");

                            b1.WithOwner()
                                .HasForeignKey("RecordedPerformanceId");
                        });

                    b.Navigation("MediaUrl")
                        .IsRequired();
                });

            modelBuilder.Entity("Timetable", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("eventify.Domain.Entities.Event", b =>
                {
                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("eventify.Domain.Entities.Member", b =>
                {
                    b.Navigation("ArtistProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
