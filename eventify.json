{
  "projectOverview": {
    "projectName": "Events Management Platform",
    "description": "A platform for managing events, clubs, artists, and members, with future plans for DJ streaming.",
    "techStack": [
      ".NET 8",
      "MS-SQL",
      "Redis",
      "MassTransit",
      "Docker/Kubernetes"
    ],
    "deploymentTarget": "Cloud (likely Azure)"
  },
  "architecture": {
    "architecturePattern": "Clean Architecture + Modular Monolith",
    "domainDrivenDesign": "Used for structuring core business logic",
    "cqrs": "Command Query Responsibility Segregation (separating reads and writes)",
    "messaging": "MassTransit (to support asynchronous processes notifications)",
    "resultPattern": "Result<T> for handling success/failure outcomes",
    "validation": "FluentValidation for input validation",
    "solutionStructure": {
      "projects": [
        {
          "name": "eventify.API",
          "description": "Web API: Controllers, middleware, Swagger integration."
        },
        {
          "name": "eventify.Application",
          "description": "Business logic: Implements CQRS (commands/queries), validation, and use cases."
        },
        {
          "name": "eventify.Domain",
          "description": "Core domain: Contains entities, aggregates, and value objects."
        },
        {
          "name": "eventify.Infrastructure",
          "description": "Data access & external services: Handles EF Core, repositories, caching (Redis), messaging, and integrations (e.g., Google Maps API)."
        }
      ],
      "database": "MS-SQL (with Entity Framework Core)",
      "caching": "Redis",
      "containerization": "Docker (with potential Kubernetes orchestration for scaling)"
    }
  },
  "functionalRequirements": {
    "member": [
      {
        "feature": "Create a concept",
        "details": [
          "A concept can have a series of events, like Tomorrow land is a festival concept that happens every year."
        ]
      },
      {
        "feature": "Create an event for a concept",
        "details": [
          "Optionally include a club."
        ]
      },
      {
        "feature": "Create an time table for an event",
        "details": [
          "a time table is constructed by 1/many time table slots ",
          "each slot has either 1 or many artists tagged , if there is no artist profile found , the organizer must specify a title"
        ]
      },
      {
        "feature": "Browse events",
        "details": "Have nearby events suggested based on the user's location or browse by filter."
      },
      {
        "feature": "Login/logout",
        "details": "Authentication for members."
      },
      {
        "feature": "Create a club"
      },
      {
        "feature": "Create Artist profile"
      },
      {
        "feature": "Can follow Artist profiles, Clubs, Concepts"
      },
      {
        "feature": "News Feed",
        "details": [
          "Personalized news feed for members.",
          "Includes updates about entities they follow (e.g., new events, recorded performances, artist bookings)."
        ]
      }
    ],
    "admin": [
      {
        "feature": "Login/logout",
        "details": "Authentication for admins."
      },
      {
        "feature": "Manage members, events, clubs",
        "details": "CRUD operations for members, events, and clubs."
      },
      {
        "feature": "View reports and statistics",
        "details": "Access to platform analytics and reports."
      }
    ]
  },
  "entityModeling": {
    "coreEntities": [
      {
        "entity": "Member",
        "keyFields": [
          "id",
          "firstName",
          "lastName",
          "email",
          "PasswordHash",
          "MemberEvents", //manyToMany , navigation property
          "ArtistProfiles" //oneToMany , navigation property
        ]
      },
      {
        "entity": "ArtistProfile",
        "keyFields": [
          "id",
          "memberId",
          "name",
          "Bio",
          "genres", //enums
          "soundCloudLink", //optional
          "facebookLink", //optional
          "spotifyLink", //optional
          "instagramLink", //optional
          "youtubeLink", //optional
          "email"
        ]
      },
      {
        "entity": "Club",
        "keyFields": [
          "id",
          "title",
          "mapsLink", //optional
          "description",
          "isVerified",
          "events" //oneToMany" , navigation property
        ]
      },
      {
        "entity": "Event",
        "keyFields": [
          "id",
          "title",
          "description",
          "date",
          "clubId",
          "club", //many to one , navigation property
          "timeTableId", //optional
          "timeTable", //optional, one to one , navigation property
          "memberEvents", //manyToMany , navigation property ,
          "eventType", //enum
          "artistAccountIds",
          "artistAccountNames",
          "timetable"
        ]
      },
      {
        "entity": "RecordedPerformance",
        "keyFields": [
          "id",
          "mediaUrl",
          "type", //enum
          "artistsIds",
          "artistsNames", //one to many , navigation property , artist entity
          "timetableSlotId", // optional
          "timeTableSlot" // optional , one to one , nagiavtion property
        ]
      },
      {
        "entity": "TimeTable",
        "keyFields": [
          "id",
          "eventId",
          "event", //one to one , navigation property
          "Slots" //one to many , navigation property TimeTableSlots entity
        ]
      },
      {
        "entity": "TimeTableSlot",
        "keyFields": [
          "id",
          "timeTableId",
          "startTime", //TimeSpan type
          "endTime", //TimeSpan type
          "artistIds",
          "artists", //nagivation property , one to many
          "recordedPerformance" //navigation property , one to one
        ]
      }
    ]
  },
  "commands": {
    "description": "These are the operations that modify data.",
    "memberCommands": [
      {
        "name": "CreateMember",
        "description": "Registers a new member."
      },
      {
        "name": "UpdateMember",
        "description": "Updates member details."
      },
      {
        "name": "CreateArtistProfile",
        "description": "Converts a member into an artist profile."
      }
    ],
    "conceptCommands": [
      {
        "name": "CreateConcept",
        "description": "Creates a new concept."
      },
      {
        "name": "UpdateConcept",
        "description": "Renames the concept or updates its music genres."
      }
    ],
    "eventCommands": [
      {
        "name": "CreateEvent",
        "description": "Creates a new event within a concept."
      },
      {
        "name": "UpdateEvent",
        "description": "Modifies event details (title, description, location, date, type, music genre)."
      }
    ],
    "timeTableCommands": [
      {
        "name": "CreateTimeTable",
        "description": "Creates a timetable for an event."
      },
      {
        "name": "AddSlotToTimeTable",
        "description": "Adds a slot to a timetable."
      },
      {
        "name": "UpdateSlotTime",
        "description": "Updates start and end time of a slot."
      }
    ],
    "recordedPerformanceCommands": [
      {
        "name": "CreatePerformance",
        "description": "Uploads a recorded performance (linked to event or artist dashboard)."
      },
      {
        "name": "UpdatePerformance",
        "description": "Updates details and attached artists of a recorded performance."
      },
      {
        "name": "DeletePerformance",
        "description": "Deletes a recorded performance."
      }
    ]
  },
  "queries": {
    "description": "These are used for retrieving data.",
    "memberQueries": [
      {
        "name": "GetMemberProfile",
        "description": "Retrieves a member's profile and artist status."
      },
      {
        "name": "GetMemberConcepts",
        "description": "Retrieves concepts created by a member."
      }
    ],
    "conceptQueries": [
      {
        "name": "GetConceptDetails",
        "description": "Retrieves a concept's details, including events and music genres."
      }
    ],
    "eventQueries": [
      {
        "name": "GetEventDetails",
        "description": "Retrieves details of a specific event."
      },
      {
        "name": "GetEventsByConcept",
        "description": "Retrieves all events under a specific concept."
      }
    ],
    "timeTableQueries": [
      {
        "name": "GetTimeTableByEvent",
        "description": "Retrieves the timetable for a specific event."
      },
      {
        "name": "GetTimeTableSlotDetails",
        "description": "Retrieves details of a specific slot."
      }
    ],
    "recordedPerformanceQueries": [
      {
        "name": "GetEventPerformances",
        "description": "Retrieves performances uploaded for a specific event."
      },
      {
        "name": "GetArtistPerformances",
        "description": "Retrieves performances uploaded by an artist from their dashboard."
      }
    ]
  },
  "futureScalability": {
    "currentState": "Modular Monolith",
    "futurePlan": [
      "Extract separate microservices for features like StreamingService or PaymentsService.",
      "Use MassTransit for asynchronous communication between services.",
      "Transition to a database-per-service model if scalability demands increase."
    ]
  },
  "nextSteps": {
    "aiAssistedDevelopment": [
    ]
  }
}